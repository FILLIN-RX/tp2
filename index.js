const chap1 = [
    {
        name: "Conception de l'application",
        content: "DÃ©finir lâ€™objectif de lâ€™application, les utilisateurs cibles, et les fonctionnalitÃ©s principales. Faire des wireframes, Ã©tablir un plan technique, choisir les technologies (frontend, backend, base de donnÃ©es)."
    },
    {
        name: "Prototype & Maquettes",
        content: "CrÃ©er une maquette ou prototype visuel de lâ€™interface avec Figma, Adobe XD ou un autre outil. Valider la navigation, les composants UI, et prÃ©parer la base du design."
    },
    {
        name: "Choix des technologies",
        content: "SÃ©lectionner les outils de dÃ©veloppement : HTML, CSS, JS, un framework frontend (React, Vueâ€¦), un backend (Node, PHPâ€¦), et une base de donnÃ©es (MongoDB, MySQLâ€¦)."
    },
    {
        name: "Organisation du projet",
        content: "CrÃ©er une arborescence de fichiers claire, initialiser le projet (Git, NPM, etc.), organiser les tÃ¢ches Ã  rÃ©aliser (Trello, Notionâ€¦) et dÃ©finir les prioritÃ©s."
    },
    {
        name: "Plan de version et MVP",
        content: "DÃ©finir la premiÃ¨re version (MVP) contenant les fonctionnalitÃ©s minimales. Planifier les itÃ©rations futures selon les retours utilisateurs ou les besoins."
    }
];

const chap2 = [
    {
        name: "Structure HTML",
        content: "CrÃ©er le fichier HTML principal, structurer la page avec les balises sÃ©mantiques (header, section, articleâ€¦), et ajouter les Ã©lÃ©ments de base comme la navbar ou les boutons."
    },
    {
        name: "CSS & Mise en forme",
        content: "Styliser les Ã©lÃ©ments avec CSS, utiliser les systÃ¨mes de layout (flexbox, grid), dÃ©finir les couleurs, polices, marges, paddings, bordures, etc."
    },
    {
        name: "Responsive Design",
        content: "Adapter le site Ã  tous les Ã©crans (mobile, tablette, desktop) grÃ¢ce aux media queries, aux unitÃ©s relatives, et en respectant les bonnes pratiques dâ€™accessibilitÃ©."
    },
    {
        name: "JavaScript Interactif",
        content: "Ajouter des interactions avec JavaScript (Ã©vÃ©nements, animations, toggle), manipuler le DOM, valider des formulaires, et stocker des donnÃ©es localement avec localStorage."
    },
    {
        name: "Framework JS",
        content: "Utiliser un framework moderne (comme React ou Vue), crÃ©er des composants rÃ©utilisables, gÃ©rer les Ã©tats (state, props), et implÃ©menter la navigation avec un router."
    }
];

const chap3 = [
    {
        name: "Initialisation du serveur",
        content: "CrÃ©er un serveur backend (avec Node.js, Express, etc.), dÃ©finir les routes de base et comprendre la logique client-serveur."
    },
    {
        name: "API REST",
        content: "DÃ©finir des routes API pour communiquer avec le frontend. Utiliser les mÃ©thodes HTTP (GET, POST, PUT, DELETE) pour gÃ©rer les donnÃ©es."
    },
    {
        name: "Base de donnÃ©es",
        content: "Choisir et configurer une base de donnÃ©es (MongoDB, PostgreSQL, etc.), crÃ©er des modÃ¨les de donnÃ©es et faire les premiÃ¨res connexions backend â‡” BDD."
    },
    {
        name: "ContrÃ´le des erreurs",
        content: "Mettre en place une gestion des erreurs propre (try/catch, middleware), valider les donnÃ©es et sÃ©curiser les points sensibles de lâ€™API."
    },
    {
        name: "Communication avec le frontend",
        content: "Connecter le backend au frontend via fetch ou axios, gÃ©rer les rÃ©ponses JSON et intÃ©grer les donnÃ©es dans lâ€™interface utilisateur."
    }
];

const chap4 = [
    {
        name: "CrÃ©ation du systÃ¨me dâ€™authentification",
        content: "Mettre en place lâ€™inscription et la connexion dâ€™un utilisateur via un formulaire sÃ©curisÃ©."
    },
    {
        name: "Hashage des mots de passe",
        content: "Utiliser bcrypt pour chiffrer les mots de passe avant de les stocker dans la base de donnÃ©es, afin de renforcer la sÃ©curitÃ©."
    },
    {
        name: "Sessions & JWT",
        content: "GÃ©rer les sessions avec express-session ou les jetons JWT pour permettre une authentification persistante entre les requÃªtes."
    },
    {
        name: "Protection des routes",
        content: "EmpÃªcher lâ€™accÃ¨s Ã  certaines routes sans authentification, ajouter des middlewares de sÃ©curitÃ© pour valider les accÃ¨s."
    },
    {
        name: "Validation & SÃ©curitÃ©",
        content: "Valider les entrÃ©es utilisateur (avec Joi ou express-validator), et protÃ©ger contre les failles courantes comme XSS, CSRF, injections, etc."
    }
];

const chap5 = [
    {
        name: "PrÃ©paration au dÃ©ploiement",
        content: "Optimiser les fichiers (minification, bundling), prÃ©parer le fichier `.env`, sÃ©curiser les clÃ©s API, et vÃ©rifier que tout fonctionne localement."
    },
    {
        name: "HÃ©bergement Frontend",
        content: "DÃ©ployer le frontend sur une plateforme comme Vercel ou Netlify en connectant simplement le repo Git."
    },
    {
        name: "HÃ©bergement Backend",
        content: "DÃ©ployer lâ€™API backend sur Render, Railway, Heroku ou autre, connecter la base de donnÃ©es distante (Mongo Atlas, Supabase, etc.)"
    },
    {
        name: "Nom de domaine & DNS",
        content: "Acheter ou utiliser un nom de domaine gratuit, le lier Ã  ton app via les DNS, et sÃ©curiser lâ€™accÃ¨s avec HTTPS (SSL)."
    },
    {
        name: "Suivi & Maintenance",
        content: "Ajouter des outils de logs, monitoring (ex: LogRocket, Sentry), analyser les erreurs et feedbacks, et prÃ©parer les mises Ã  jour futures."
    }
];


function chap10(chapterSelector,chapterData) {
    const chapter = document.querySelector(chapterSelector);
    const content = document.querySelector(".section1");
    const contentSection = document.querySelector(".section4");

    chapter.addEventListener("click", () => {
        console.log("clicked");
        console.log(chap1);

        // Clear existing buttons if needed
        content.innerHTML = "";

        for (let i = 0; i < chapterData.length; i++) {
            const element = chapterData[i];
            console.log(element.name);

            const button = document.createElement("p");
            button.classList.add("button", "buttonChap1");
            button.innerText = element.name;
            button.style.margin = "15px";
            button.style.display="flex"
            button.style.width = "80%";
            content.appendChild(button);

            // Add event listener for each button individually
            button.addEventListener("click", () => {

               
                
                // ðŸ’¬ Affiche le contenu
                contentSection.innerHTML = "";
                const paragraph = document.createElement("p");
                paragraph.innerText = element.content;
                contentSection.appendChild(paragraph);
            });
        }
    });
}
chap10(".chap1", chap1);
chap10(".chap2", chap2);
chap10(".chap3", chap3);
chap10(".chap4", chap4);
chap10(".chap5", chap5);



